import React, { useState, useRef, useEffect } from 'react';
import {
  Box,
  Button,
  Card,
  CardContent,
  CardHeader,
  CircularProgress,
  Container,
  Divider,
  Grid,
  IconButton,
  List,
  ListItem,
  ListItemText,
  Paper,
  TextField,
  Typography,
  useTheme,
  Chip,
  Tooltip,
} from '@mui/material';
import { useSnackbar } from 'notistack';
import SendIcon from '@mui/icons-material/Send';
import HistoryIcon from '@mui/icons-material/History';
import DeleteIcon from '@mui/icons-material/Delete';
import { documentsAPI } from '../services/api';

function QueryPage() {
  const [query, setQuery] = useState('');
  const [answer, setAnswer] = useState('');
  const [loading, setLoading] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);
  const [sources, setSources] = useState([]);
  const messagesEndRef = useRef(null);
  const { enqueueSnackbar } = useSnackbar();
  const theme = useTheme();

  // Load chat history from localStorage on component mount
  useEffect(() => {
    const savedHistory = localStorage.getItem('chatHistory');
    if (savedHistory) {
      try {
        setChatHistory(JSON.parse(savedHistory));
      } catch (error) {
        console.error('Error parsing chat history:', error);
      }
    }
  }, []);

  // Save chat history to localStorage whenever it changes
  useEffect(() => {
    if (chatHistory.length > 0) {
      localStorage.setItem('chatHistory', JSON.stringify(chatHistory));
    }
  }, [chatHistory]);

  // Auto-scroll to bottom of messages
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [chatHistory, answer]);

  const handleQuerySubmit = async (e) => {
    e.preventDefault();
    if (!query.trim() || loading) return;

    const userQuery = query.trim();
    setQuery('');
    
    // Add user query to chat history
    const userMessage = { role: 'user', content: userQuery };
    const updatedHistory = [...chatHistory, userMessage];
    setChatHistory(updatedHistory);
    
    try {
      setLoading(true);
      setAnswer('');
      
      // Simulate streaming response (replace with actual API call)
      // const response = await documentsAPI.query({ question: userQuery });
      // setAnswer(response.data.answer);
      // setSources(response.data.sources || []);
      
      // For demo purposes, simulate a response
      setTimeout(() => {
        const demoAnswer = `This is a sample response to your query: "${userQuery}". In a real implementation, this would be generated by the RAG system based on your documents.`;
        setAnswer(demoAnswer);
        setSources([
          { source: 'document1.pdf', page: 3 },
          { source: 'research_paper.pdf', page: 12 }
        ]);
        
        // Add assistant's response to chat history
        setChatHistory(prev => [
          ...prev,
          { 
            role: 'assistant', 
            content: demoAnswer,
            sources: [
              { source: 'document1.pdf', page: 3 },
              { source: 'research_paper.pdf', page: 12 }
            ]
          }
        ]);
        setLoading(false);
      }, 1500);
      
    } catch (error) {
      console.error('Error querying documents:', error);
      enqueueSnackbar('Failed to get response', { variant: 'error' });
      setLoading(false);
    }
  };

  const clearChatHistory = () => {
    if (window.confirm('Are you sure you want to clear the chat history?')) {
      setChatHistory([]);
      setAnswer('');
      setSources([]);
      localStorage.removeItem('chatHistory');
    }
  };

  const formatMessage = (message) => {
    // Simple markdown-like formatting for better readability
    return message
      .split('\n')
      .map((line, i) => (
        <Typography key={i} paragraph={i > 0} sx={{ mb: 0 }}>
          {line}
        </Typography>
      ));
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4, height: 'calc(100vh - 200px)' }}>
      <Grid container spacing={3} sx={{ height: '100%' }}>
        <Grid item xs={12} md={8} sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
          <Card sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}>
            <CardHeader 
              title="Ask Questions" 
              action={
                <Tooltip title="Clear chat history">
                  <IconButton onClick={clearChatHistory} disabled={chatHistory.length === 0}>
                    <DeleteIcon />
                  </IconButton>
                </Tooltip>
              }
            />
            <Divider />
            <CardContent sx={{ flex: 1, overflowY: 'auto', p: 0 }}>
              <Box sx={{ p: 2 }}>
                {chatHistory.length === 0 ? (
                  <Box
                    sx={{
                      display: 'flex',
                      flexDirection: 'column',
                      alignItems: 'center',
                      justifyContent: 'center',
                      height: '100%',
                      textAlign: 'center',
                      p: 4,
                      color: 'text.secondary',
                    }}
                  >
                    <HistoryIcon sx={{ fontSize: 48, mb: 2, opacity: 0.5 }} />
                    <Typography variant="h6">No chat history yet</Typography>
                    <Typography variant="body2">Ask a question about your documents to get started</Typography>
                  </Box>
                ) : (
                  <List>
                    {chatHistory.map((msg, index) => (
                      <React.Fragment key={index}>
                        <ListItem
                          alignItems="flex-start"
                          sx={{
                            backgroundColor: msg.role === 'user' ? 'action.hover' : 'background.paper',
                            borderRadius: 1,
                            mb: 1,
                          }}
                        >
                          <ListItemText
                            primary={
                              <Typography variant="subtitle2" color="text.primary" fontWeight="medium">
                                {msg.role === 'user' ? 'You' : 'Assistant'}
                              </Typography>
                            }
                            secondary={
                              <Box component="span" sx={{ display: 'inline' }}>
                                {formatMessage(msg.content)}
                                {msg.sources && msg.sources.length > 0 && (
                                  <Box sx={{ mt: 1 }}>
                                    <Typography variant="caption" color="text.secondary">
                                      Sources:
                                    </Typography>
                                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>
                                      {msg.sources.map((source, i) => (
                                        <Chip
                                          key={i}
                                          size="small"
                                          label={`${source.source}${source.page ? ` (p. ${source.page})` : ''}`}
                                          variant="outlined"
                                        />
                                      ))}
                                    </Box>
                                  </Box>
                                )}
                              </Box>
                            }
                            secondaryTypographyProps={{ component: 'div' }}
                          />
                        </ListItem>
                        <Divider component="li" sx={{ my: 1 }} />
                      </React.Fragment>
                    ))}
                    {loading && (
                      <Box sx={{ display: 'flex', alignItems: 'center', p: 2 }}>
                        <CircularProgress size={20} sx={{ mr: 2 }} />
                        <Typography variant="body2" color="text.secondary">
                          Thinking...
                        </Typography>
                      </Box>
                    )}
                    <div ref={messagesEndRef} />
                  </List>
                )}
              </Box>
            </CardContent>
            <Box component="form" onSubmit={handleQuerySubmit} sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>
              <Grid container spacing={1} alignItems="center">
                <Grid item xs>
                  <TextField
                    fullWidth
                    variant="outlined"
                    placeholder="Ask a question about your documents..."
                    value={query}
                    onChange={(e) => setQuery(e.target.value)}
                    disabled={loading}
                    multiline
                    maxRows={4}
                    InputProps={{
                      endAdornment: (
                        <IconButton 
                          type="submit" 
                          color="primary" 
                          disabled={!query.trim() || loading}
                        >
                          <SendIcon />
                        </IconButton>
                      ),
                    }}
                  />
                </Grid>
              </Grid>
              <Typography variant="caption" color="text.secondary" sx={{ mt: 1, display: 'block' }}>
                Press Enter to send, Shift+Enter for new line
              </Typography>
            </Box>
          </Card>
        </Grid>
        <Grid item xs={12} md={4}>
          <Card sx={{ height: '100%' }}>
            <CardHeader title="Document Sources" />
            <Divider />
            <CardContent>
              {sources.length > 0 ? (
                <List dense>
                  {sources.map((source, index) => (
                    <ListItem key={index}>
                      <ListItemText
                        primary={source.source}
                        secondary={`Page ${source.page}`}
                        primaryTypographyProps={{ variant: 'body2' }}
                        secondaryTypographyProps={{ variant: 'caption' }}
                      />
                    </ListItem>
                  ))}
                </List>
              ) : (
                <Box textAlign="center" p={2}>
                  <Typography variant="body2" color="text.secondary">
                    Sources will appear here when you ask a question
                  </Typography>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </Container>
  );
}

export default QueryPage;
